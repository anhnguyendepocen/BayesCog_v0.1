rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
# scatter plot
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
ggsave(plot = g1, "_plots/scatter.png", width = 6, height = 4, type = "cairo-png", units = "in")
load('_data/height.RData')
d <- Howell1
# scatter plot
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
ggsave(plot = g1, "_plots/scatter.png", width = 6, height = 4, type = "cairo-png", units = "in")
getwd()
dir('_scripts/')
source('E:/teaching/BayesCog/regression_height_poly/_scripts/regression_height_poly_main.R')
head(d)
a <- c(1,2,5,7)
a^2
d$weight_sq <- d$weight^2
head(d)
rstan:::rstudio_stanc("_scripts/regression_height_poly2_model.stan")
rstan:::rstudio_stanc("_scripts/regression_height_poly2_model.stan")
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d$weight_sq <- d$weight^2
# scatter plot
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight, weight_sq=d$weight_sq)
modelFile <- '_scripts/regression_height_poly1_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_poly <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = FALSE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
source('_scripts/HDIofMCMC.R')
source('_scripts/HDIofMCMC.R')
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = FALSE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = FALSE)$height_bar
print(fit_reg_poly)
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = TRUE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
parm <- get_posterior_mean(fit_reg_ppc, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
parm <- get_posterior_mean(fit_reg_ppc, c('alpha','beta1'))[,5]
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta1'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta1'))[,5]
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
ggsave(plot = g3, "_plots/regressionline_lm_poly1.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggplot_build(g1)$panel$ranges[[1]]$y.range
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height') + ylim(47,186)
print(g1)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta'))[,5]
g2 <- g1 + geom_abline(intercept = parm[1], slope = parm[2],
color = "red", size = 2, alpha=0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d$weight_sq <- d$weight^2
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight, weight_sq=d$weight_sq)
modelFile <- '_scripts/regression_height_poly2_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_poly <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = TRUE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta1', 'beta2'))[,5]
g2 <- g1 + stat_smooth(method = "lm", formula = y ~ poly(x, 2), size = 1)
g2
g2 <- g1 + stat_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2), size = 2, alpha = 0.8)
g2
g2 <- g1 + stat_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2), size = 2, alpha = 0.8, color = red)
g2 <- g1 + stat_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2), size = 2, alpha = 0.8, color = "red")
print(g2)
myfun <-  function(x, alpha=parm[1], beta1=parm[2], beta2=parm[3]){alpha + beta1 * x + beta2 * x^2}
myfun <-  function(x, alpha=parm[1], beta1=parm[2], beta2=parm[3]){alpha + beta1 * x + beta2 * x^2}
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
g2
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
rm(list=ls(all=TRUE))
source('E:/teaching/BayesCog/regression_height_poly/_scripts/regression_height_poly_main.R')
reg_poly(2)
library(rstan)
library(ggplot2)
source('_scripts/HDIofMCMC.R')
load('_data/height.RData')
d <- Howell1
d$weight_sq <- d$weight^2
# =============================================================================
#### Running Stan ####
# =============================================================================
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
N <- length(d$height)
dataList <- list(N=N, height=d$height, weight=d$weight, weight_sq=d$weight_sq)
modelFile <- '_scripts/regression_height_poly1_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_poly <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = TRUE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
# =============================================================================
#### make plots ####
# =============================================================================
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height')
print(g1)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta'))[,5]
myfun <-  function(x, alpha=parm[1], beta=parm[2]){alpha + beta * x}
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
g2
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
g3
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height') + ylim(47, 200)
print(g1)
parm <- get_posterior_mean(fit_reg_poly, c('alpha','beta'))[,5]
myfun <-  function(x, alpha=parm[1], beta=parm[2]){alpha + beta * x}
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
print(g1)
ggsave(plot = g1, "_plots/scatter.png", width = 6, height = 4, type = "cairo-png", units = "in")
print(g3)
ggsave(plot = g3, "_plots/regressionline_lm_poly1.png", width = 6, height = 4, type = "cairo-png", units = "in")
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height') + ylim(47, 220)
print(g1)
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height') + ylim(47, 210)
print(g1)
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
ggsave(plot = g1, "_plots/scatter.png", width = 6, height = 4, type = "cairo-png", units = "in")
ggsave(plot = g3, "_plots/regressionline_lm_poly1.png", width = 6, height = 4, type = "cairo-png", units = "in")
modelFile <- '_scripts/regression_height_poly2_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_reg_poly <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
height_bar <- extract(fit_reg_poly, pars = 'height_bar', permuted = TRUE)$height_bar
height_HDI <- apply(height_bar, 2, HDIofMCMC) # 2nd dimension
# construct intervals into df
d$lower <- height_HDI[1,]
d$upper <- height_HDI[2,]
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(d, aes(weight,height))
g1 <- g1 + geom_jitter(width=0.25, height=0.25, size=3, colour='skyblue', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'weight', y = 'height') + ylim(47, 210)
print(g1)
parm  <- get_posterior_mean(fit_reg_poly, c('alpha','beta1', 'beta2'))[,5]
myfun <-  function(x, alpha=parm[1], beta1=parm[2], beta2=parm[3]){alpha + beta1 * x + beta2 * x^2}
# g2 <- g1 + stat_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2), color
g2 <- g1 + stat_function(fun = myfun, color = "red", size = 2, alpha = 0.8)
print(g2)
g3 <- g2 + geom_ribbon(aes(ymin=lower, ymax=upper), linetype=2, alpha=0.2)
print(g3)
ggsave(plot = g3, "_plots/regressionline_lm_poly2.png", width = 6, height = 4, type = "cairo-png", units = "in")
eq <- substitute(italic(h) == a + b1%%italic(x) + b2%%italic(r)^2,
list(a  = format(parm[1], digits = 2),
b1 = format(parm[2], digits = 2),
b2 = format(parm[3], digits = 2)))
as.character(as.expression(eq))
a = as.character(as.expression(eq))
g3 + annotate("text", x=25, y=175, label=a, hjust=0, size=8,
family="Times", face="italic", parse=TRUE)
?annotate
g3 + annotate("text", x=25, y=175, label=a, hjust=0, size=8,
family="Times", parse=TRUE)
# install packages
if(sum(rownames(installed.packages())=="ggplot2")==0){install.packages("ggplot2",dependencies=T)}
if(sum(rownames(installed.packages())=="reshape2")==0){install.packages("reshape2",dependencies=T)}
if(sum(rownames(installed.packages())=="R.matlab")==0){install.packages("R.matlab",dependencies=T)}
if(sum(rownames(installed.packages())=="Cairo")==0){install.packages("Cairo",dependencies=T)}
# load packages
library("ggplot2")
library("reshape2")
library("R.matlab")
library("Cairo")
if(sum(rownames(installed.packages())=="ggplot2")==0){install.packages("ggplot2",dependencies=T)}
if(sum(rownames(installed.packages())=="reshape2")==0){install.packages("reshape2",dependencies=T)}
if(sum(rownames(installed.packages())=="R.matlab")==0){install.packages("R.matlab",dependencies=T)}
if(sum(rownames(installed.packages())=="Cairo")==0){install.packages("Cairo",dependencies=T)}
# load packages
library("ggplot2")
library("reshape2")
library("R.matlab")
library("Cairo")
source('E:/Dropbox/BayesCog/regression_height_poly/_scripts/regression_height_poly_main_master.R')
rstan:::rstudio_stanc("_scripts/regression_height_poly1_model.stan")
rstan:::rstudio_stanc("_scripts/regression_height_poly1_model.stan")
rstan:::rstudio_stanc("_scripts/regression_height_poly2_model.stan")
source('E:/Dropbox/BayesCog/regression_height_poly/_scripts/regression_height_poly_main_master.R')
source('E:/Dropbox/BayesCog/regression_height_poly/_scripts/regression_height_poly_main.R')
out1 <- reg_poly(1)
out1 <- reg_poly(2)
source('E:/Dropbox/BayesCog/regression_height_poly/_scripts/regression_height_poly_main.R')
out2 <- reg_poly(2)
rstan:::rstudio_stanc("_scripts/regression_height_poly1_model.stan")
rstan:::rstudio_stanc("_scripts/regression_height_poly2_model.stan")
