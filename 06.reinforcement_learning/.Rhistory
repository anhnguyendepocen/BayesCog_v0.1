print(fit_rl)
nIter     <- 4000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random"
#control  = list(adapt_delta=0.9, max_treedepth=20)
#seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
nIter     <- 4000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.9, max_treedepth=20)
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
nIter     <- 4000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.9, max_treedepth=20),
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.95, max_treedepth=40),
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.99, max_treedepth=60),
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
saveRDS(fit_rl, file = '_outputs/fit_rl_mp_hrch.RData',compress = F)
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau'), show_density=T, fill_color = 'skyblue')
plot_dens_lr
plot_dens_tau
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr_sd','lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau_sd','tau'), show_density=T, fill_color = 'skyblue')
plot_dens_lr
plot_dens_tau
ggsave(plot = plot_dens_lr, "_plots/lr_mp_hrch_lr_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_tau, "_plots/lr_mp_hrch_tau_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
#control  = list(adapt_delta=0.99, max_treedepth=60),
seed    = 1450154626
)
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
library(R.matlab)
load('_data/rl_mp.RData')
sz <- dim(rl_mp)
nSubjects <- sz[1]
nTrials   <- sz[2]
dataList <- list(nSubjects=nSubjects,
nTrials=nTrials,
choice=rl_mp[,,1],
reward=rl_mp[,,2])
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/reinforcement_learning_mp_hrch_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.999, max_treedepth=100),
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
fit_rl@stanmodel
fit_rl1 = fit_rl
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.999, max_treedepth=100),
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
i=1;j=1
i=1;j=1
t=c(1:10)
t1=c(1,3,5,8)
t2=c(2,4,6,9)
brz=c(10,20,30,40)
n=c()
for(j in 1:length(t1)) {
for ( t[i] in t1[j] : t2[j] ) {
n[i] = brz [j]
}
}
j=j+1
n
i=1;j=1
t=c(1:10)
t1=c(1,3,5,8)
t2=c(2,4,6,9)
brz=c(10,20,30,40)
n=c()
n = array(0, 10)
n
timePoint = 10
t1=c(1,3,5,8)
t2=c(2,4,6,9)
brz=c(10,20,30,40)
n = array(0, 10)
for (j in 1:length(t1) ) {
n[t1[j]:t2[j]] = array(brz[j], t2[j]-t1[j])
}
n
timePoint = 10
t1=c(1,3,5,8)
t2=c(2,4,6,10)
brz=c(10,20,30,40)
n = array(0, 10)
for (j in 1:length(t1) ) {
n[t1[j]:t2[j]] = array(brz[j], t2[j]-t1[j])
}
n
timePoint = 10
t1=c(1,3,5,8)
t2=c(2,4,6,10)
brz=c(10,20,30,40)
n = array(0, 10)
for (j in 1:length(t1) ) {
n[t1[j]:t2[j]] = array(brz[j], t2[j]-t1[j] + 1)
}
n
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
fit_rl2 = fit_rl
pars_value <- get_posterior_mean(fit_rl1, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
saveRDS(fit_rl1, file = '_outputs/fit_rl_mp_hrch.RData',compress = F)
saveRDS(fit_rl1, file = '_outputs/fit_rl_mp_hrch.RData',compress = F)
fit_rl1@stanmodel
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_model.stan")
source('E:/teaching/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R', echo=TRUE)
fit_rl = fit_rl1
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr_sd','lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau_sd','tau'), show_density=T, fill_color = 'skyblue')
ggsave(plot = plot_dens_lr, "_plots/lr_mp_hrch_lr_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_tau, "_plots/lr_mp_hrch_tau_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
pars_value <- get_posterior_mean(fit_rl1, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
?rnorm
plot_dens_grp <- stan_plot(fit_rl, pars=c('lr_mu','lr_sd', 'tau_mu','tau_sd'), show_density=T, fill_color = 'skyblue')
ggsave(plot = plot_dens_grp, "_plots/lr_mp_hrch_grp_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_grp, "_plots/lr_mp_hrch_grp_dens.png", width = 4, height = 4, type = "cairo-png", units = "in")
print(fit_rl, pars = c('lr_mu','lr_sd', 'tau_mu','tau_sd'))
rm(list=ls(all=TRUE))
myData = read.csv('C:/Users/Lei Zhang/Desktop/ctaltona1.csv', header = TRUE, sep = ",")
myData = read.csv('E:/teaching/others/Ship_time_ChaoLu/ctaltona1.csv', header = TRUE, sep = ",")
myData$ta = as.character(myData$ta)
myData$tb = as.character(myData$tb)
myData$t0 = as.character("2015/09/01 0:00")
myData$tx = as.character("2016/08/25 14:00")
myData$ta_std = as.POSIXct(myData$ta, format="%Y/%m/%d %H:%M", tz="GMT")
myData$tb_std = as.POSIXct(myData$tb, format="%Y/%m/%d %H:%M", tz="GMT")
myData$t0_std = as.POSIXct(myData$t0, format="%Y/%m/%d %H:%M", tz="GMT")
myData$tx_std = as.POSIXct(myData$tx, format="%Y/%m/%d %H:%M", tz="GMT")
myData
myData = read.csv('E:/teaching/others/Ship_time_ChaoLu/ctaltona1.csv', header = TRUE, sep = ",")
myData$ta = as.character(myData$ta)
myData$tb = as.character(myData$tb)
myData$ta_std = as.POSIXct(myData$ta, format="%Y/%m/%d %H:%M", tz="GMT")
myData$tb_std = as.POSIXct(myData$tb, format="%Y/%m/%d %H:%M", tz="GMT")
myData
myData$ta_std = as.POSIXct(myData$ta, format="%d/%m/%Y %H:%M", tz="GMT")
myData$tb_std = as.POSIXct(myData$tb, format="%d/%m/%Y %H:%M", tz="GMT")
myData
myData$t0 = as.character("2015/09/01 0:00")
myData$tx = as.character("2016/08/25 14:00")
myData$t0_std = as.POSIXct(myData$t0, format="%Y/%m/%d %H:%M", tz="GMT")
myData$tx_std = as.POSIXct(myData$tx, format="%Y/%m/%d %H:%M", tz="GMT")
myData
myData
myData = read.csv('E:/teaching/others/Ship_time_ChaoLu/ctaltona1.csv', header = TRUE, sep = ",")
# convert date/time format using as.POSIXct
myData$ta = as.character(myData$ta)
myData$tb = as.character(myData$tb)
myData$ta_std = as.POSIXct(myData$ta, format="%d/%m/%Y %H:%M", tz="GMT")
myData$tb_std = as.POSIXct(myData$tb, format="%d/%m/%Y %H:%M", tz="GMT")
t0 = "2015/09/01 0:00"
tx = "2016/08/25 14:00"
t0_std = as.POSIXct(myData$t0, format="%Y/%m/%d %H:%M", tz="GMT")
tx_std = as.POSIXct(myData$tx, format="%Y/%m/%d %H:%M", tz="GMT")
t0_std = as.POSIXct(t0, format="%Y/%m/%d %H:%M", tz="GMT")
tx_std = as.POSIXct(tx, format="%Y/%m/%d %H:%M", tz="GMT")
t0  = t0_std
tx  = tx_std
t1  = myData$ta_std
t2  = myData$tb_std
brz = myData$brz
n = array(0, as.numeric(difftime(tx, t0, units = 'mins')) + 1)
tx
t0
my_brz <- function(t1, t2, t0, tx, brz) {
n = array(0, as.numeric(difftime(tx, t0, units = 'mins')) + 1)
for (j in 1:length(brz) ) {
# absolute difference between t2 and t1
if (class(t1)[1] == 'POSIXct') {
t_start = as.numeric(difftime(t1[j], t0, units = 'mins')) + 1
t_end   = as.numeric(difftime(t2[j], t0, units = 'mins')) + 1
} else {
t_start = t1[j] - t0 + 1
t_end   = t2[j] - t0 + 1
}
# write all the brz to a vector n
n[t_start:t_end] = rep(brz[j], t_end - t_start + 1)
}
return(n)
}
n = my_brz(t1,t2,t0,tx, brz)
plot(1:length(n), n)
library(ggplot2)
df = data.frame(time = 1:length(n), weight = n/1000)
g  = ggplot(df, aes(time, weight))
g  = g + geom_jitter(width=0.5, height=0.5, size=3, shape = 21,
colour='dodgerblue4', fill='dodgerblue1', alpha=0.8)
g  = g + labs(x = 'time (min)', y = 'weight of cruise ship (KT)')
g  = g + theme_grey(base_size = 20)
print(g)
# save the plot
ggsave(plot = g, "exampleBRZ1.png", width = 7, height = 4, type = "cairo-png", units = "in")
View(myData)
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main_master.R')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main_master.R')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
rstan:::rstudio_stanc("_scripts/reinforcement_learning_sp_ss_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_sp_ss_model.stan")
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
out1 <- run_rl_sp(F)
out1 <- run_rl_sp(multiSubj = F)
out1 <- run_rl_sp(multiSubj = FALSE)
traceback()
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
out1 <- run_rl_sp(multiSubj = FALSE)
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
out1 <- run_rl_sp(multiSubj = FALSE)
multiSubj = FALSE
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
out1 <- run_rl_sp(multiSubj = FALSE)
rstan:::rstudio_stanc("_scripts/reinforcement_learning_sp_ms_model.stan")
stan_trace(out1, pars = c('lr','tau'), inc_warmup = F)
stan_plot(outl, pars=c('lr','tau'), show_density=T, fill_color = 'skyblue')
stan_plot(out1, pars=c('lr','tau'), show_density=T, fill_color = 'skyblue')
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_indv_model.stan")
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
out2 <- run_rl_sp(multiSubj = T)
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main_master.R')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R')
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_indv_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_model.stan")
out3 <- run_rl_mp('indv')
out4 <- run_rl_mp('hrch')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R')
out4 <- run_rl_mp('hrch')
source('E:/Dropbox/BayesCog/reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R')
out4 <- run_rl_mp('hrch')
source('E:/Dropbox/BayesCog/06.reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
fit_rl1 <- run_rl_sp(F)
source('E:/Dropbox/BayesCog/06.reinforcement_learning/_scripts/reinforcement_learning_multi_parm_main.R')
fit_rl3 <- run_rl_mp( modelType ='hrch' )
source('E:/Dropbox/BayesCog/!final_handout_aftercourse/BayesCog/06.reinforcement_learning/_scripts/reinforcement_learning_single_parm_main.R')
