sampler_params <- get_sampler_params(fit, inc_warmup=FALSE)
if (nchain == 1) {
hist(sapply(sampler_params, function(x) c(x[,'treedepth__']))[,1], breaks=0:20, main="", xlab="Treedepth")
} else {
hist(sapply(sampler_params, function(x) c(x[,'treedepth__']))[,1:nchain], breaks=0:20, main="", xlab="Treedepth")
}
abline(v=10, col=2, lty=1)
}
hist_treedepth(funnel_fit1,4)
hist_treedepth(funnel_fit2,4)
hist_treedepth(funnel_fit3,4)
stan_trace(funnel_fit1, 'y')
stan_trace(funnel_fit2, 'y')
stan_trace(funnel_fit3, 'y')
myMean1 = 0
mySD1   = 1
myMean2 = 2
mySD2   = 1.5
max(myMean1)
max(myMean1, myMean2)
min(myMean1, myMean2)
myMean1 = 0
mySD1   = 1
myMean2 = 2
mySD2   = 1.5
myXlim = c(min(myMean1, myMean2)-5, max(myMean1, myMean2)+5)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'black')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'black')
g1 <- g1 + myconfig
print(g1)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
## normal distribution
myMean1 = 0
mySD1   = 1
myMean2 = 2
mySD2   = 1.5
myXlim = c(min(myMean1, myMean2)-5, max(myMean1, myMean2)+5)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'black')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'black')
g1 <- g1 + myconfig
print(g1)
myMean1 = 0
mySD1   = 1
myMean2 = 5
mySD2   = 1.5
myXlim = c(min(myMean1, myMean2)-5, max(myMean1, myMean2)+5)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'black')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'black')
g1 <- g1 + myconfig
print(g1)
myMean1 = 0
mySD1   = 1
myMean2 = 10
mySD2   = 1.5
myXlim = c(min(myMean1, myMean2)-5, max(myMean1, myMean2)+5)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'black')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'black')
g1 <- g1 + myconfig
print(g1)
myMean1 = 0
mySD1   = 1
myMean2 = 8
mySD2   = 2
myXlim = c(min(myMean1, myMean2)-5, max(myMean1, myMean2)+5)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'black')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'black')
g1 <- g1 + myconfig
print(g1)
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'navyblue')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'tomato1')
g1 <- g1 + myconfig
print(g1)
myMean1 = 0
mySD1   = 1
myMean2 = 8
mySD2   = 2
myXlim = c(min(myMean1, myMean2)-8, max(myMean1, myMean2)+8)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'navyblue')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'tomato1')
g1 <- g1 + myconfig
print(g1)
g1 <- g1 + myconfig + labs(x = '', y = '')
print(g1)
ggsave(plot = g1, "_plots/MattTrick.png", width = 6, height = 4, type = "cairo-png", units = "in")
myMean1 = 0
mySD1   = 1
myMean2 = 10
mySD2   = 3
myXlim = c(min(myMean1, myMean2)-10, max(myMean1, myMean2)+10)
# dnorm
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'navyblue')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'tomato1')
g1 <- g1 + myconfig + labs(x = '', y = '')
print(g1)
ggsave(plot = g1, "_plots/MattTrick.png", width = 6, height = 4, type = "cairo-png", units = "in")
g1 <- ggplot(data.frame(x = myXlim), aes(x)) +
stat_function(fun = dnorm, args = list(mean = myMean1, sd = mySD1), size = 3, colour = 'navyblue')
g1 <- g1 + stat_function(fun = dnorm, args = list(mean = myMean2, sd = mySD2), size = 3, colour = 'tomato1')
g1 <- g1 + myconfig + labs(x = '', y = '') + ylim(0,0.5)
print(g1)
ggsave(plot = g1, "_plots/MattTrick.png", width = 6, height = 4, type = "cairo-png", units = "in")
funnel_fit1 <- stan("_scripts/funnel.stan",
seed = 1212337896)
print(funnel_fit1)
print(funnel_fit2)
print(funnel_fit3)
plot_trace1 <- stan_trace(funnel_fit1, pars = 'y', inc_warmup = F)
ggsave(plot = plot_trace1, "_plots/trace_y_directModel.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_trace2 <- stan_trace(funnel_fit2, pars = 'y', inc_warmup = F)
ggsave(plot = plot_trace2, "_plots/trace_y_adjustedDirectModel.png", width = 6, height = 4, type = "cairo-png", units = "in")
plot_trace3 <- stan_trace(funnel_fit3, pars = 'y', inc_warmup = F)
ggsave(plot = plot_trace3, "_plots/trace_y_reparameterizesModel.png", width = 6, height = 4, type = "cairo-png", units = "in")
rm(list=ls(all=TRUE))
library(rstan); library(ggplot2)
startTime = proc.time()
# =============================================================================
# direct model
# =============================================================================
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
system.time(
funnel_fit1 <- stan("_scripts/funnel.stan",
seed = 1212337896)
)
# =============================================================================
# adjust delta
# =============================================================================
system.time(
funnel_fit2 <- stan("_scripts/funnel.stan",
seed = 1212337896,
control = list(adapt_delta = 0.999, max_treedepth=20))
)
# =============================================================================
# reparameterized model
# =============================================================================
system.time(
funnel_fit3 <- stan("_scripts/funnel_reparam.stan",
seed = 1212337896)
)
stopTime = proc.time()
elapsedTime = stopTime - startTime
elapsedTime
rm(list=ls(all=TRUE))
library(rstan); library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
system.time(
funnel_fit2 <- stan("_scripts/funnel.stan",
seed = 1212337896,
control = list(adapt_delta = 0.999, max_treedepth=20))
)
rm(list=ls(all=TRUE))
library(rstan); library(ggplot2)
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
system.time(
funnel_fit1 <- stan("_scripts/funnel.stan",
seed = 1212337896)
)
rm(list=ls(all=TRUE))
library(rstan)
library(ggplot2)
library(R.matlab)
load('_data/rl_mp.RData')
sz <- dim(rl_mp)
nSubjects <- sz[1]
nTrials   <- sz[2]
dataList <- list(nSubjects=nSubjects,
nTrials=nTrials,
choice=rl_mp[,,1],
reward=rl_mp[,,2])
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
?stan
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/reinforcement_learning_mp_hrch_optm_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
control  = list(adapt_delta=0.999, max_treedepth=100),
seed    = 1450154626
)
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
print(fit_rl)
pars_value <- get_posterior_mean(fit_rl1, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
pars_value <- get_posterior_mean(fit_rl1, pars=c('lr','tau'))[,5]
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr_sd','lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau_sd','tau'), show_density=T, fill_color = 'skyblue')
fit3 <- readRDS('_outputs/fit_rl_mp_hrch.RData')
print(fit3)
stan_trace(fit3, pars = c('lr_mu', 'tau_mu'))
stan_trace(fit_rl, pars = c('lr_mu', 'tau_mu'))
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau'), show_density=T, fill_color = 'skyblue')
ggsave(plot = plot_dens_lr, "_plots/lr_mp_hrch_optm_lr_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_tau, "_plots/lr_mp_hrch_optm_tau_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_optm_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
modelFile <- '_scripts/reinforcement_learning_mp_hrch_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr'), show_density=T, fill_color = 'skyblue')
plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau'), show_density=T, fill_color = 'skyblue')
ggsave(plot = plot_dens_lr, "_plots/lr_mp_hrch_lr_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
ggsave(plot = plot_dens_tau, "_plots/lr_mp_hrch_tau_dens.png", width = 3, height = 4, type = "cairo-png", units = "in")
pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]
pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))
df <- data.frame(pars_value=pars_value, pars_name=pars_name)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name))
g1 <- g1 + geom_violin(trim=TRUE, size=2)
g1 <- g1 + stat_summary(fun.data=data_summary, geom="pointrange", color="black", size=1.5)
g1 <- g1 + scale_fill_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + scale_color_manual(values=c("#2179b5", "#c60256"))
g1 <- g1 + myconfig + theme(legend.position="none")
g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)
print(g1)
ggsave(plot = g1, "_plots/lr_mp_hrch_violin.png", width = 4, height = 4, type = "cairo-png", units = "in")
stan_trace(fit_rl, pars = c('lr_mu', 'tau_mu'))
stan_trace(fit_rl, pars = c('lr'))
modelFile <- '_scripts/reinforcement_learning_mp_hrch_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
saveRDS(fit_rl, file = '_outputs/fit_rl_hrch.RData',compress = F)
stan_trace(fit_rl, pars = c('lr[]'))
stan_trace(fit_rl, pars = c('lr[1]'))
stan_trace(fit_rl, pars = c('lr[2]'))
?traceplot
stan_dens(fit_rl, pars='lr[1]', separate_chains = T)
stan_trace(fit_rl, pars = c('lr[3]'))
stan_trace(fit_rl, pars = c('lr[4]'))
stan_trace(fit_rl, pars = c('lr[5]'))
stan_trace(fit_rl, pars = c('lr[6]'))
stan_trace(fit_rl, pars = c('lr[7]'))
stan_trace(fit_rl, pars = c('lr[8]'))
stan_trace(fit_rl, pars = c('lr[9]'))
stan_trace(fit_rl, pars = c('lr[10]'))
stan_trace(fit_rl, pars = c('lr[7]'))
t = stan_trace(fit_rl, pars = c('lr[7]'))
ggsave(plot = t, "_plots/lr_hrch_lr7_trace.png", width = 4, height = 3, type = "cairo-png", units = "in")
modelFile <- '_scripts/reinforcement_learning_mp_hrch_optm_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
stan_trace(fit_rl, pars = c('lr[7]'))
t = stan_trace(fit_rl, pars = c('lr[7]'))
ggsave(plot = t, "_plots/lr_hrch_optm_lr7_trace.png", width = 4, height = 3, type = "cairo-png", units = "in")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
library(rstan)
library(ggplot2)
library(R.matlab)
load('_data/rl_mp.RData')
sz <- dim(rl_mp)
nSubjects <- sz[1]
nTrials   <- sz[2]
dataList <- list(nSubjects=nSubjects,
nTrials=nTrials,
choice=rl_mp[,,1],
reward=rl_mp[,,2])
rstan_options(auto_write = TRUE)
options(mc.cores = 2)
modelFile <- '_scripts/reinforcement_learning_mp_hrch_optm_model.stan'
nIter     <- 2000
nChains   <- 4
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
nIter     <- 2
nChains   <- 1
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
nIter     <- 2
nChains   <- 1
nWarmup   <- floor(nIter/2)
nThin     <- 1
cat("Estimating", modelFile, "model... \n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulations in Stan... \n")
fit_rl <- stan(modelFile,
data    = dataList,
chains  = nChains,
iter    = nIter,
warmup  = nWarmup,
thin    = nThin,
init    = "random",
seed    = 1450154626
)
cat("Finishing", modelFile, "model simulation ... \n")
endTime = Sys.time(); print(endTime)
cat("It took",as.character.Date(endTime - startTime), "\n")
q()
rstan:::rstudio_stanc("_scripts/funnel_reparam.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_optm_model.stan")
rstan:::rstudio_stanc("_scripts/reinforcement_learning_mp_hrch_model.stan")
source('E:/Dropbox/BayesCog/optm_rl/_scripts/reinforcement_learning_hrch_main.R')
source('E:/Dropbox/BayesCog/optm_rl/_scripts/reinforcement_learning_hrch_main.R')
source('E:/Dropbox/BayesCog/optm_rl/_scripts/reinforcement_learning_hrch_main.R')
fit_rl5 <- run_rl_mp2(F)
source('E:/Dropbox/BayesCog/optm_rl/_scripts/reinforcement_learning_hrch_main.R')
fit_rl5 <- run_rl_mp2(F)
fit_rl6 <- run_rl_mp2(T)
