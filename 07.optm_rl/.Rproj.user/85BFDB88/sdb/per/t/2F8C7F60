{
    "contents" : "# =============================================================================\n#### Info #### \n# =============================================================================\n# simple reinforcement learning model\n#\n# true parameters: lr  = rnorm(10, mean=0.6, sd=0.12); tau = rnorm(10, mean=1.5, sd=0.2)\n#\n# Lei Zhang, UKE, Hamburg, DE\n# lei.zhang@uke.de\n\nrun_rl_mp <- function(optimized = FALSE) {\n    # =============================================================================\n    #### Construct Data #### \n    # =============================================================================\n    # clear workspace\n    rm(list=ls(all=TRUE))\n    library(rstan)\n    library(ggplot2)\n    library(R.matlab)\n    \n    load('_data/rl_mp.RData')\n    sz <- dim(rl_mp)\n    nSubjects <- sz[1]\n    nTrials   <- sz[2]\n    \n    dataList <- list(nSubjects=nSubjects,\n                     nTrials=nTrials, \n                     choice=rl_mp[,,1], \n                     reward=rl_mp[,,2])\n    \n\n    # =============================================================================\n    #### Running Stan #### \n    # =============================================================================\n    rstan_options(auto_write = TRUE)\n    options(mc.cores = 2)\n    \n    if (optimized == FALSE) {\n        modelFile <- '_scripts/reinforcement_learning_mp_hrch_model.stan'\n    } else {\n        modelFile <- '_scripts/reinforcement_learning_mp_hrch_optm_model.stan'\n    } \n    \n    nIter     <- 2000\n    nChains   <- 4 \n    nWarmup   <- floor(nIter/2)\n    nThin     <- 1\n    \n    cat(\"Estimating\", modelFile, \"model... \\n\")\n    startTime = Sys.time(); print(startTime)\n    cat(\"Calling\", nChains, \"simulations in Stan... \\n\")\n    \n    fit_rl <- stan(modelFile, \n                   data    = dataList, \n                   chains  = nChains,\n                   iter    = nIter,\n                   warmup  = nWarmup,\n                   thin    = nThin,\n                   init    = \"random\",\n                   seed    = 1450154626\n                   )\n    \n    cat(\"Finishing\", modelFile, \"model simulation ... \\n\")\n    endTime = Sys.time(); print(endTime)  \n    cat(\"It took\",as.character.Date(endTime - startTime), \"\\n\")\n    \n    # =============================================================================\n    #### Model Summary and Diagnostics #### \n    # =============================================================================\n    print(fit_rl)\n    \n    if (optimized == FALSE) {\n        plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr'), show_density=T, fill_color = 'skyblue')\n        plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau'), show_density=T, fill_color = 'skyblue')\n        \n        ggsave(plot = plot_dens_lr, \"_plots/lr_mp_hrch_lr_dens.png\", width = 3, height = 4, type = \"cairo-png\", units = \"in\")\n        ggsave(plot = plot_dens_tau, \"_plots/lr_mp_hrch_tau_dens.png\", width = 3, height = 4, type = \"cairo-png\", units = \"in\")\n      \n    } else {\n        plot_dens_lr  <- stan_plot(fit_rl, pars=c('lr_mu','lr'), show_density=T, fill_color = 'skyblue')\n        plot_dens_tau <- stan_plot(fit_rl, pars=c('tau_mu','tau'), show_density=T, fill_color = 'skyblue')\n        \n        ggsave(plot = plot_dens_lr, \"_plots/lr_mp_hrch_optm_lr_dens.png\", width = 3, height = 4, type = \"cairo-png\", units = \"in\")\n        ggsave(plot = plot_dens_tau, \"_plots/lr_mp_hrch_optm_tau_dens.png\", width = 3, height = 4, type = \"cairo-png\", units = \"in\")\n    } \n    \n    ## stan_plot(fit_reg, pars = 'p', show_density = T)\n    \n    # =============================================================================\n    #### Violin plot of posterior means #### \n    # =============================================================================\n    pars_value <- get_posterior_mean(fit_rl, pars=c('lr','tau'))[,5]\n    pars_name  <- as.factor(c(rep('lr',10),rep('tau',10)))\n    df <- data.frame(pars_value=pars_value, pars_name=pars_name)\n    \n    myconfig <- theme_bw(base_size = 20) +\n        theme(panel.grid.major = element_blank(),\n              panel.grid.minor = element_blank(),\n              panel.background = element_blank() )\n    \n    data_summary <- function(x) {\n        m <- mean(x)\n        ymin <- m-sd(x)\n        ymax <- m+sd(x)\n        return(c(y=m,ymin=ymin,ymax=ymax))\n    }\n\n    g1 <- ggplot(df, aes(x=pars_name, y=pars_value, color = pars_name, fill=pars_name)) \n    g1 <- g1 + geom_violin(trim=TRUE, size=2)\n    g1 <- g1 + stat_summary(fun.data=data_summary, geom=\"pointrange\", color=\"black\", size=1.5)\n    g1 <- g1 + scale_fill_manual(values=c(\"#2179b5\", \"#c60256\"))\n    g1 <- g1 + scale_color_manual(values=c(\"#2179b5\", \"#c60256\"))\n    g1 <- g1 + myconfig + theme(legend.position=\"none\")\n    g1 <- g1 + labs(x = '', y = 'parameter value') + ylim(0.3,2.2)\n    print(g1)\n    \n    if (optimized == FALSE) {\n        ggsave(plot = g1, \"_plots/lr_mp_hrch_violin.png\", width = 4, height = 4, type = \"cairo-png\", units = \"in\")\n    } else {\n        ggsave(plot = g1, \"_plots/lr_mp_hrch_optm_violin.png\", width = 4, height = 4, type = \"cairo-png\", units = \"in\")\n    } \n}\n",
    "created" : 1474452931246.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "701528076",
    "id" : "2F8C7F60",
    "lastKnownWriteTime" : 1474453681,
    "path" : "E:/teaching/BayesCog/optm_rl/_scripts/reinforcement_learning_hrch_main.R",
    "project_path" : "_scripts/reinforcement_learning_hrch_main.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}